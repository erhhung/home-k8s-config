---
# https://goharbor.io/
- name: Install Harbor on K3s
  hosts: rancher
  vars_files:
    - vars/basics.yml
    - vars/kubernetes.yml
    - vars/harbor.yml
  vars:
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
  tasks:
    - name: Add Harbor TLS+CA secret
      block:
        - name: Fetch cert files from PKI
          delegate_to: pki
          vars:
            ansible_python_interpreter: "{{ default_python_interpreter }}"
          # catting is easier than ansible.builtin.slurp
          # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html
          ansible.builtin.command: cat certs/{{ item }}
          loop:
            - harbor.pem # contains intermediate and root CA certs
            - harbor.key
          register: certs
          changed_when: false

        - name: Create harbor namespace
          # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
          kubernetes.core.k8s:
            kubeconfig: "{{ k3s_kubeconfig }}"
            api_version: v1
            kind: Namespace
            name: "{{ harbor_namespace }}"
            state: present

        - name: Create Harbor TLS secret
          vars:
            # split chain into individual certs: host, intermediate CA, and root CA
            # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/regex_findall_filter.html
            chain: "{{ certs.results[0].stdout | ansible.builtin.regex_findall(
              '(-----BEGIN CERTIFICATE-----(?:\\n\\S+)+\\n-----END CERTIFICATE-----)',
              multiline=True) }}"
          kubernetes.core.k8s:
            kubeconfig: "{{ k3s_kubeconfig }}"
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ harbor_chart_values.expose.tls.secret.secretName }}"
                namespace: "{{ harbor_namespace }}"
              type: kubernetes.io/tls
              data:
                ca.crt: "{{ chain[-1] | b64encode }}"
                # tls.crt includes host and intermediate CA certs
                tls.crt: "{{ chain[:-1] | join('\n') | b64encode }}"
                tls.key: "{{ certs.results[1].stdout | b64encode }}"
            validate:
              fail_on_error: true
            state: present
            apply: true

    # https://goharbor.io/docs/latest/install-config/harbor-ha-helm/
    - name: Install Harbor Helm chart
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
      kubernetes.core.helm:
        kubeconfig: "{{ k3s_kubeconfig }}"
        chart_repo_url: https://helm.goharbor.io
        chart_ref: harbor
        chart_version: "{{ harbor_chart_version }}"
        release_name: harbor
        release_namespace: "{{ harbor_namespace }}"
        release_values: "{{ harbor_chart_values }}"
        atomic: true
        wait: true
      timeout: 300

    # - name: Install Harbor CLI utility
    #   # https://github.com/goharbor/harbor-cli
    #   # binary release not currently available
  any_errors_fatal: true

- name: Configure Harbor registry
  hosts: rancher
  gather_facts: false
  vars_files:
    - vars/basics.yml
    - vars/kubernetes.yml
    - vars/harbor.yml
  vars:
    # https://harbor.fourteeners.local/devcenter-api-2.0
    api_base: https://{{ harbor_fqdn }}/api/v2.0
    api_auth: admin:"{{ harbor_admin_pass }}"
  tasks:
    - name: Add non-admin Harbor users
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
      ansible.builtin.shell: |
        set -o pipefail
        get_user_id() {
          local api_url="{{ api_base }}/users/search?username=$1"
          curl -sku {{ api_auth }} "$api_url" | jq -r .[].user_id
        }
        user_id="$(get_user_id {{ item.username }})"
        [ "$user_id" ] && exit 9 # no change

        params=(
          username="{{ item.username }}"
          realname="{{ item.realname }}"
             email="{{ item.email    }}"
          password="{{ item.password | quote }}"
           comment="{{ item.comment  | quote if item.comment is defined else '' }}"
        )
        curl -X POST -sku {{ api_auth }} \
             -H 'Content-Type: application/json' \
             -d "$(jo "${params[@]}")" {{ api_base }}/users
        user_id="$(get_user_id {{ item.username }})"
        [ "$user_id" ] || exit 1

        # add user to default library project
        role_id={{ harbor_roles[item.role] }}
        params=(
          member_user=$(jo user_id=$user_id)
          role_id=$role_id
        )
        curl -X POST -sku {{ api_auth }} \
             -H 'Content-Type: application/json' \
             -d "$(jo "${params[@]}")" {{ api_base }}/projects/library/members
      args:
        executable: /bin/bash
      loop: "{{ harbor_users }}"
      loop_control:
        label: "{{ item.username }}"
      register: create_users
      changed_when: create_users.rc == 0
      failed_when: >-
        create_users.rc != 0 and
        create_users.rc != 9 or
        create_users.stdout is search('errors')
