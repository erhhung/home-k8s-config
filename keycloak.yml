# https://www.keycloak.org/
# https://www.keycloak.org/getting-started/getting-started-kube
# https://www.keycloak.org/server/importExport
---
- name: Install Keycloak on RKE cluster
  hosts: "{{ rke_control_plane_host }}"
  vars_files:
    - vars/basics.yml
    - vars/kubernetes.yml
    - vars/storage.yml
    - vars/postgresql.yml
    - vars/keycloak.yml
  vars:
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
    kubeconfig: "{{ rke_kubeconfig }}"
  pre_tasks:
    - name: Get PostgreSQL image used
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_info_module.html
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig }}"
        api_version: apps/v1
        kind: StatefulSet
        name: postgresql-postgresql
        namespace: "{{ postgresql_namespace }}"
      register: postgresql_sts

    - name: Set postgresql_image fact
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_fact_module.html
      ansible.builtin.set_fact:
        postgresql_image: >-
          {{ postgresql_sts.resources[0].spec.template.spec.containers |
              selectattr('name', '==', 'postgresql') |
              map(attribute='image') | first }}
      when: postgresql_sts.resources | length > 0

    # keycloak.sql was generated by pg_dump after Keycloak's Liquibase engine initialized
    # an empty database. It contains the master realm and bootstrap admin user, and later
    # customized with "erhhung" as secondary admin user, and a new realm called "homelab"
    # that is similarly customized with SMTP config using iCloud and several OIDC clients
    # pg_dump --no-owner --no-privileges --schema public \
    #    -h pg.fourteeners.local -U keycloak -d keycloak > keycloak.sql
    - name: Read encrypted keycloak.sql
      delegate_to: localhost
      vars:
        # gzip-compressed and base64-encoded SQL is
        # ~80K, well under 256K limit for ConfigMap
        db_file: vars/keycloak/keycloak.sql.gz.age

        # use the default Python interpreter on Ansible controller
        ansible_python_interpreter: "{{ default_python_interpreter }}"
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
      ansible.builtin.shell: |
        set -eo pipefail

        age_file="{{ db_file }}"
        tmp_file="/tmp/$(basename "$age_file")"
        b64_file="${tmp_file/%.age/.b64}"
        sql_file="${b64_file%.gz.b64}"

        cp -f "$age_file" /tmp
        ./gzage.sh "$tmp_file"

        # --no-name ignores timestamp!
        gzip -9ncq "$sql_file" | base64
        rm   -f    "$sql_file"
      args:
        executable: /bin/bash
      register: keycloak_sql
      changed_when: false

    # - name: Show {{ keycloak_sql_gz_b64 }} MD5
    #   # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/debug_module.html
    #   ansible.builtin.debug:
    #     # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/md5_filter.html
    #     msg: "{{ keycloak_sql.stdout | ansible.builtin.md5 }}"
  tasks:
    - name: Create Keycloak database secret
      vars:
        # Java requires key file to
        # be in PKCS#8 / DER format
        cert_desc: Keycloak DB
        cert_file: keycloak_db
        secret_type: generic # not tls because key is in binary format
        secret_name: "{{ keycloak_secrets['database'] }}"
        secret_ns: "{{ keycloak_namespace }}"
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/include_tasks_module.html
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.pki.yml

    - name: Create Keycloak ingress secret
      vars:
        cert_desc: Keycloak ingress
        cert_file: keycloak
        secret_type: tls
        secret_name: "{{ keycloak_secrets['ingress'] }}"
        secret_ns: "{{ keycloak_namespace }}"
        create_ns: false
      ansible.builtin.include_tasks: tasks/k8s/secrets/tls.pki.yml

    - name: Create {{ keycloak_configmaps['dbsql'] }} ConfigMap
      vars:
        data: |
          {% set data = {} %}
          {% set _ = data.update({
               keycloak_sql_gz_b64: keycloak_sql.stdout
             }) %}
          {{ data }}
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ keycloak_configmaps['dbsql'] }}"
            namespace: "{{ keycloak_namespace }}"
          data: "{{ data }}"
        validate:
          fail_on_error: true
        state: present
        apply: true

    - name: Create {{ keycloak_configmaps['admin'] }} ConfigMap
      vars:
        files:
          - vars/keycloak/profile.sh
        data: |
          {% set data = {} %}
          {% for file in files %}
          {%   set name = file.split('/')[-1] %}
          {%   set _ = data.update({
                  name: lookup('ansible.builtin.file', file, rstrip=false)
               }) %}
          {% endfor %}
          {{ data }}
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: "{{ keycloak_configmaps['admin'] }}"
            namespace: "{{ keycloak_namespace }}"
          data: "{{ data }}"
        validate:
          fail_on_error: true
        state: present
        apply: true

    # https://github.com/codecentric/helm-charts/tree/master/charts/keycloakx
    - name: Install Keycloak.X Helm chart
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_module.html
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig }}"
        chart_repo_url: https://codecentric.github.io/helm-charts
        chart_ref: keycloakx
        chart_version: "{{ keycloakx_chart_version }}"
        release_name: keycloakx
        release_namespace: "{{ keycloak_namespace }}"
        release_values: "{{ keycloakx_chart_values }}"
        atomic: true
        wait: true
        wait_timeout: 10m0s # requires wait=true
      # startup can take a while at max utilization of allocated CPU:
      # "updating configuration and installing your custom providers"
      timeout: 900
  any_errors_fatal: true
