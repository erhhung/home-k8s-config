# https://github.com/istio/istio/releases/latest
istio_version: "1.25.1"
istio_bin_dir: /opt/istio/bin

# https://istio.io/latest/docs/ambient/install/istioctl/#install-or-upgrade-the-kubernetes-gateway-api-crds
k8s_gateway_api_version: "1.2.1"
k8s_gateway_api_crds_url: >-
  https://github.com/kubernetes-sigs/gateway-api/releases/download/v{{
    k8s_gateway_api_version }}/standard-install.yaml

istio_namespace: istio-system
kiali_namespace: "{{ istio_namespace }}"
kiali_host_names: # aliases of "homelab"
  - kiali
  - istio

# remember to add kiali.fourteeners.local (and istio.fourteeners.local)
# to pfSense DNS as aliases of homelab.fourteeners.local: 192.168.0.221
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#products
kiali_fqdns: "{{ kiali_host_names | product(search_domains) | map('join','.') }}"

kiali_secrets:
  openid: kiali-openid
  ingress: kiali-ingress-tls

# https://kiali.io/docs/installation/installation-guide/install-with-helm/#install-with-operator
kiali_operator_namespace: kiali-operator
kiali_operator_chart_version: "2.7.1"
kiali_supported_image_version: "v2.4"

kiali_oidc_client_id: kiali
# kiali_oidc_client_secret: {vault.yml}
# sso.fourteeners.local is same host as keycloak.fourteeners.local
kiali_oidc_issuer_uri: https://sso.fourteeners.local/realms/homelab

# https://kiali.io/docs/configuration/kialis.kiali.io/
kiali_cr_spec:
  version: "{{ kiali_supported_image_version }}"

  # support SSO login using OIDC integration with Keycloak, but
  # disable namespace access control because that would require
  # the cluster to have already been connected with OIDC, which
  # isn't possible since Keycloak also runs in this RKE cluster
  # https://kiali.io/docs/configuration/authentication/openid/#set-up-with-no-namespace-access-control-support
  auth:
    strategy: openid
    openid:
      disable_rbac: true
      insecure_skip_verify_tls: true
      client_id: "{{ kiali_oidc_client_id }}"
      issuer_uri: "{{ kiali_oidc_issuer_uri }}"
      scopes:
        - openid # required
        - basic
        - email
        - profile
      username_claim: name # purely informational

  # https://kiali.io/docs/configuration/kialis.kiali.io/#.spec.identity
  identity:
    cert_file: /tls/ingress/tls.crt
    private_key_file: /tls/ingress/tls.key

  deployment:
    secret_name: "{{ kiali_secrets['openid'] }}"

    # https://kiali.io/docs/configuration/kialis.kiali.io/#.spec.deployment.custom_secrets
    custom_secrets:
      # cert referenced by identity.cert_file
      - name: "{{ kiali_secrets['ingress'] }}"
        mount: /tls/ingress

    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        memory: 1Gi

    ingress:
      enabled: true

      # https://kiali.io/docs/configuration/kialis.kiali.io/#.spec.deployment.ingress.override_yaml
      override_yaml:
        metadata:
          annotations:
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            nginx.ingress.kubernetes.io/secure-backends: "true"
            # redirect root domain to dashboard at /kiali
            nginx.ingress.kubernetes.io/server-snippet: |
              location = / {
                return 302 $scheme://$host/kiali;
              }
        spec:
          ingressClassName: "{{ rke_ingress_class }}"
          tls:
            - secretName: "{{ kiali_secrets['ingress'] }}"
              hosts: "{{ kiali_fqdns }}"
          rules: |
            {% set rules = [] %}
            {% for host in kiali_fqdns %}
            {%   set _ = rules.append({
                   'host': host,
                   'http': {
                     'paths': [{
                       'path':     '/kiali',
                       'pathType': 'Prefix',
                       'backend': {
                         'service': {
                           'name': 'kiali',
                           'port': {
                             'number': 20001
                           }
                         }
                       }
                     }]
                   }
                 }) %}
            {% endfor %}
            {{ rules }}
