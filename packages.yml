---
# https://helm.sh/docs/intro/install/#from-apt-debianubuntu
- name: Configure Helm Apt repository
  hosts: k8s_all
  become: true
  vars:
    keyring: /usr/share/keyrings/helm.gpg
    srcs_list: /etc/apt/sources.list.d/helm.sources
  pre_tasks:
    - name: Get machine architecture
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_fact_module.html
      ansible.builtin.set_fact:
        machine_arch: "{{ 'arm64' if ansible_facts['architecture'] == 'aarch64' else 'amd64' }}"

    - name: Is Apt repo configured?
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/stat_module.html
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - "{{ keyring }}"
        - "{{ srcs_list }}"
      register: apt_repo
  tasks:
    - name: Download Helm keyring file
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
      ansible.builtin.shell: |
        set -o pipefail
        curl https://baltocdn.com/helm/signing.asc | \
          gpg --dearmor | tee {{ keyring }} > /dev/null
      args:
        executable: /bin/bash
      when: not apt_repo.results[0].stat.exists
      changed_when: true

    - name: Create Helm sources list
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/copy_module.html
      ansible.builtin.copy:
        dest: "{{ srcs_list }}"
        content: |
          Types: deb
          URIs: https://baltocdn.com/helm/stable/debian/
          Suites: all
          Components: main
          Architectures: {{ machine_arch }}
          Signed-By: {{ keyring }}
        mode: "0644"
      when: not apt_repo.results[1].stat.exists
  any_errors_fatal: true

- name: Install required packages
  hosts: k8s_all
  vars_files:
    - vars/packages.yml
  tasks:
    - name: Install required Apt packages
      become: true
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/apt_module.html
      ansible.builtin.apt:
        name: "{{ install_apt_packages }}"
        state: present
        force_apt_get: true
        update_cache: true
        install_recommends: false
      when: install_apt_packages | length > 0
      # Could fail due to normal Apt updates that
      # hold the lock, so retry until successful
      # https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_loops.html#retrying-a-task-until-a-condition-is-met
      retries: 5
      delay: 5

    - name: Install required Pip packages
      # create virtualenv in user's home directory
      become: false
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/pip_module.html
      ansible.builtin.pip:
        name: "{{ install_pip_packages }}"
        state: present
        virtualenv: "{{ ansible_user_virtualenv }}"
      when: install_pip_packages | length > 0

    - name: Install useful Helm plugins
      # plugins are installed in the user's home
      # directory under .local/share/helm/plugins
      become: false
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/helm_plugin_module.html
      kubernetes.core.helm_plugin:
        plugin_name: "{{ item.name if item.name is defined else omit }}"
        plugin_path: "{{ item.path if item.path is defined else omit }}"
        state: "{{ item.state if item.state is defined else 'present' }}"
      loop: "{{ install_helm_plugins }}"
  any_errors_fatal: true

- name: Install apps from GitHub releases
  hosts: k8s_all
  tasks:
    - name: Install Fastfetch from GitHub
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        REL="https://github.com/fastfetch-cli/fastfetch/releases/latest"
        VER=$(curl -Is $REL | sed -En 's/^location:.+\/tag\/(.+)\r$/\1/p')

        # check if latest version already installed
        command -v fastfetch &> /dev/null && {
          ver=$(v=(`fastfetch --version`); echo ${v[1]})
          [ "$ver" == "$VER" ] && exit 9 # no change
        }
        ARCH=$(uname -m | sed -e 's/x86_64/amd64/')
        curl -fsSL "$REL/download/fastfetch-linux-$ARCH.tar.gz" | \
          tar -xz -C / --no-same-owner --strip 1 fastfetch-linux-$ARCH
      args:
        executable: /bin/bash
      register: install_ff
      changed_when: install_ff.rc == 0
      failed_when: >-
        install_ff.rc != 0 and
        install_ff.rc != 9
