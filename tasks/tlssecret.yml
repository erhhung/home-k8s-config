# fetch certificate from PKI server
# and create Kubernetes TLS secret.
# pass the following vars:
#   cert_desc   <required> certificate description
#   cert_file   <required> name of .pem/.key files
#   kubeconfig  <required> path to  kubeconfig
#   secret_type [optional] default tls/generic
#   secret_name <required> name      of Secret
#   secret_ns   <required> namespace of Secret
#   create_ns   [optional] default true
# sets the following facts:
#   pem_chain   individual certs from .pem file
# registers following vars:
#   tls_secret  result of Secret creation task
---
- name: Create {{ cert_desc }} TLS+CA secret
  become: false
  vars:
    # required kubernetes>=24.2 package only in user virtualenv
    ansible_python_interpreter: "{{ venv_python_interpreter }}"
  block:
    - name: Fetch cert files from PKI
      delegate_to: pki
      vars:
        ansible_python_interpreter: "{{ default_python_interpreter }}"
      # .key file may be in binary format, so base-64 encode all files
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html
      ansible.builtin.command: base64 certs/{{ item }}
      loop:
        - "{{ cert_file }}.pem" # contains intermediate and root CA certs
        - "{{ cert_file }}.key"
      register: certs
      changed_when: false

    - name: Split PEM into pem_chain fact
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/set_fact_module.html
      ansible.builtin.set_fact:
        # split chain into individual certs: host, intermediate CA, and root CA
        # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/regex_findall_filter.html
        pem_chain: "{{ certs.results[0].stdout | b64decode |
          ansible.builtin.regex_findall(
          '(-----BEGIN CERTIFICATE-----(?:\\n\\S+)+\\n-----END CERTIFICATE-----)',
          multiline=True) }}"

    - name: Create {{ secret_ns }} Namespace
      # https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        api_version: v1
        kind: Namespace
        name: "{{ secret_ns }}"
        state: present
      when: create_ns | default(true)

    - name: Create {{ secret_name }} Secret
      vars:
        type: >-
          {{ 'kubernetes.io/tls' if (secret_type | default('tls') | lower) == 'tls' else
          'Opaque' if (secret_type | lower) is search('generic|opaque') else secret_type }}
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ secret_name }}"
            namespace: "{{ secret_ns }}"
          type: "{{ type }}"
          data:
            # tls.crt includes host and intermediate CA certs
            tls.crt: "{{ pem_chain[:-1]          | join('\n') | b64encode }}"
            tls.key: "{{ certs.results[1].stdout | b64decode  | b64encode }}"
            ca.crt: "{{  pem_chain[-1]                        | b64encode }}"
        validate:
          fail_on_error: true
        state: present
        apply: true
      register: tls_secret
  any_errors_fatal: true
